package com.postgrid.magicspell;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.ShapeDrawable;
import android.graphics.drawable.shapes.OvalShape;
import android.os.Build;
import android.preference.PreferenceManager;
import android.support.annotation.RequiresApi;
import android.support.v4.content.ContextCompat;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;

import java.util.HashMap;

/**
 * <h1>MSKeyboardView</h1>
 * Controller class that handles the full keyboard view of the application.
 * <p>
 * MSKeyboardView is responsible for drawing and orienting the keyboard in
 * both landscape and portrait mode. In addition, it is responsible for handling
 * touch events and responding to event changes.
 *
 * @author Connor
 * @version 0.1
 * @since 8/21/2016
 */
public class MSKeyboardView extends View implements SharedPreferences.OnSharedPreferenceChangeListener {

    /**
     * myWidth: Key Width
     * myHeight: Key Height
     * pHeight: Percent Height ?
     * circles: Array of circles to be drawn
     * service: Service handler for functionality
     * TAG: Logger tag for class
     * TIMEOUT: Used to distinguish between single/multi touch events
     * heightPercent: Store height percent of key(s)
     * mContext: MSKeyboardView aplication context
     * gestureDetector: Detects gestures and events supplied to MotionEvent(s)
     * sharedPref: Access class preference data for persistance
     */
    private int myWidth;
    private int pHeight;
    private int myHeight;
    private int lHeight;
    private ShapeDrawable[] circles;
    private MSKeyboardService service;
    private static final String TAG = "CustomButtonsView";
    private static final int TIMEOUT = 200;
    private int heightPercent;
    Context mContext;
    private GestureDetector gestureDetector;

    private SharedPreferences sharedPref;

    Paint blackPaint;


    /**
     * composingChord: Check if pressing chord
     * lastPointerReleaseTime: Time at which last finger is released
     * chordCoords: Array of point coordinates
     * pointerOrig: HashMap of origin coordinates
     * pointerIdx: int array of all pointer indeces
     * (The rest are for representing all the modifier keys.)
     */
    boolean composingChord;
    long lastPointerReleaseTime;
    Point[] chordCoords;
    int[] pointerIdx;
    HashMap<Integer, Integer> pointerOrig;
    private Drawable kl_backspace;
    private Drawable kl_space;
    private Drawable kl_period;
    private Drawable kl_shift;
    private Drawable kl_comma;
    private Drawable kl_resize;
    private Drawable kl_numbers;

    private boolean[] pressed;

    // array of all the buttons
    private static final MSButton[] BUTTONS = {
            MSButton.BUTTON_1,
            MSButton.BUTTON_2,
            MSButton.BUTTON_3,
            MSButton.BUTTON_4,
            MSButton.BUTTON_5,
            MSButton.BUTTON_6,
            MSButton.BUTTON_7,
            MSButton.BUTTON_8,
            MSButton.BUTTON_9,
            MSButton.BUTTON_10,
            MSButton.BUTTON_SHIFT,
            MSButton.BUTTON_COMMA,
            MSButton.BUTTON_PERIOD,
            MSButton.BUTTON_SPACE,
            MSButton.BUTTON_BACKSPACE,
            MSButton.BUTTON_NUMBERS,
            MSButton.BUTTON_RESIZE
    };

    /**
     *
     * @param context application contezt
     * @param attrs associated with keys
     */
    @RequiresApi(api = Build.VERSION_CODES.CUPCAKE)
    public MSKeyboardView(Context context, AttributeSet attrs) {
        super(context, attrs);

        pHeight = 0;
        lHeight = 0;
        myHeight = 0;
        myWidth = 0;

        mContext = context;
        circles = new ShapeDrawable[BUTTONS.length];
        for (int i = 0; i < circles.length; i++) {
            circles[i] = new ShapeDrawable(new OvalShape());
        }

        service = null;
        heightPercent = 50;
        gestureDetector = new GestureDetector(mContext,new MyGestureDetector());

        blackPaint = new Paint();

        composingChord = false;
        lastPointerReleaseTime = 0;
        chordCoords = new Point[2];
        pointerIdx = new int[2];
        // Resources res = mContext.getResources();
        kl_backspace = ContextCompat.getDrawable(mContext, R.drawable.keylabel_backspace);
        kl_period = ContextCompat.getDrawable(mContext, R.drawable.keylabel_periodex);
        kl_space = ContextCompat.getDrawable(mContext, R.drawable.keylabel_space);
        kl_shift = ContextCompat.getDrawable(mContext, R.drawable.keylabel_shift);
        kl_comma = ContextCompat.getDrawable(mContext, R.drawable.keylabel_commaq);
        // TODO: Fix numbers and resize functionality.
        kl_resize = ContextCompat.getDrawable(mContext, R.drawable.keylabel_resize);
        kl_numbers = ContextCompat.getDrawable(mContext, R.drawable.keylabel_numbers);
        // Resource.getDrawable() is deprecated!
        // kl_numbers = res.getDrawable(R.drawable.keylabel_numbers);

        pressed = new boolean[circles.length];
        pointerOrig = new HashMap<>(2);

    }

    @Override
    public void onDraw (Canvas canvas) {
        super.onDraw(canvas);
        DisplayMetrics metrics = mContext.getResources().getDisplayMetrics();

        blackPaint.setColor(Color.DKGRAY);
        double alpha = 255.0 * sharedPref.getInt("seekBar", 100) / 100.0;
        Log.d(TAG, "pref: " + sharedPref.getInt("point0x", 25));

        //change the background color.
        int backColor = sharedPref.getInt("backColor",0xff0000);
        blackPaint.setColor(backColor);

        //get the buttons color
        int buttonColor = sharedPref.getInt("buttonColor",0xff0000);

        //we would get the positions of butttons here
        blackPaint.setAlpha((int)alpha);
        canvas.drawRect(0, 0, canvas.getWidth(), canvas.getHeight(), blackPaint);


        int totalWidth = metrics.widthPixels;
        int widthForCircles = (int)(totalWidth * 0.6f);
        int circleWidth = (int)(widthForCircles / 10.0f);
        int boxWidth;
        int spaceWidth = circleWidth*3;
        int shiftWidth = circleWidth*2;
        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
            if (sharedPref.getBoolean("pResized", false)) {
                for (int i = 0; i < 10; i++) {
                    int x = sharedPref.getInt("pPoint" + i + "x", 0);
                    int y = sharedPref.getInt("pPoint" + i + "y", 0);
                    circles[i].setBounds(x, y, x + circleWidth, y + circleWidth);
                }
            } else {
                //buttons 0 to 9
                for(int i = 0; i < circles.length; i++){
                    setButtonPosition(i);
                }
            }
        } else if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
            if (sharedPref.getBoolean("lResized", false)) {
                for (int i = 0; i < 10; i++) {
                    int x = sharedPref.getInt("lPoint" + i + "x", 0);
                    int y = sharedPref.getInt("lPoint" + i + "y", 0);
                    circles[i].setBounds(x, y, x + circleWidth, y + circleWidth);
                }
            } else {
                //buttons 0 to 9
                for(int i = 0; i < circles.length; i++){
                    setButtonPosition(i);
                }
            }
        } else {
            //buttons 0 to 9
            for(int i = 0; i < circles.length; i++){
                setButtonPosition(i);
            }
        }

        int constantForRaise = 5;
        int y = myHeight - constantForRaise;
        boxWidth = totalWidth / 11;
        //space - 13
        int x = totalWidth/2 - spaceWidth/2;
        circles[13].setBounds(x,y - circleWidth,x + spaceWidth, y);
        kl_space.setBounds(x+((int)(spaceWidth*.2)),y-circleWidth,x+((int)(spaceWidth*.8)),y);

        //Shift - 10
        x = boxWidth - circleWidth;
        circles[10].setBounds(x,y - circleWidth,x + shiftWidth, y);
        kl_shift.setBounds(x+((int)(shiftWidth*.1)),y-((int)(circleWidth*.9)),x+((int)(shiftWidth*.9)),y-((int)(circleWidth*.1)));

        //Comma - 11
        x = (int) (boxWidth * 2 + boxWidth * 0.5f) - (circleWidth / 2);
        circles[11].setBounds(x,y - circleWidth,x + circleWidth, y);
        kl_comma.setBounds(x+((int)(circleWidth*.1)),y-((int)(circleWidth*.9)),x+((int)(circleWidth*.9)),y-((int)(circleWidth*.1)));

        //period - 12
        x = (int) (boxWidth * 3 + boxWidth * 0.5f) - (circleWidth / 2);
        circles[12].setBounds(x,y - circleWidth,x + circleWidth, y);
        kl_period.setBounds(x+((int)(circleWidth*.1)),y-((int)(circleWidth*.9)),x+((int)(circleWidth*.9)),y-((int)(circleWidth*.1)));

        //backspace - 14
        x = (int) (boxWidth * 7 + boxWidth * 0.5f) - (circleWidth / 2);
        circles[14].setBounds(x,y - circleWidth,x + shiftWidth, y);
        kl_backspace.setBounds(x+((int)(shiftWidth*.1)),y-((int)(circleWidth*.9)),x+((int)(shiftWidth*.9)),y-((int)(circleWidth*.1)));

        //numbers - 15
        x = (int) (boxWidth*9 + boxWidth * 0.5f) - (circleWidth / 2);
        circles[15].setBounds(x,y-circleWidth,x+circleWidth,y);
        kl_numbers.setBounds(x+((int)(circleWidth*.1)),y-((int)(circleWidth*.9)),x+((int)(circleWidth*.9)),y-((int)(circleWidth*.1)));


        //resize - 16
        x = (int) (boxWidth * 10 + boxWidth * 0.5f) - (circleWidth / 2);
        circles[16].setBounds(x,y-circleWidth,x+circleWidth,y);
        kl_resize.setBounds(x+((int)(circleWidth*.1)),y-((int)(circleWidth*.9)),x+((int)(circleWidth*.9)),y-((int)(circleWidth*.1)));

        for (int i = 0; i < circles.length; i++) {
            if (pressed[i])
                circles[i].getPaint().setColor(Color.YELLOW);
            else
                circles[i].getPaint().setColor(buttonColor);
            circles[i].getPaint().setAlpha((int)alpha);
            circles[i].draw(canvas);
        }
        kl_backspace.draw(canvas);
        kl_period.draw(canvas);
        kl_space.draw(canvas);
        kl_shift.draw(canvas);
        kl_comma.draw(canvas);
        kl_resize.draw(canvas);
        kl_numbers.draw(canvas);
    }

    @Override
    public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        DisplayMetrics metrics = mContext.getResources().getDisplayMetrics();
        myWidth = MeasureSpec.getSize(widthMeasureSpec);
        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE)
            myHeight = sharedPref.getInt("lHeight", (int)(metrics.heightPixels * heightPercent / 100.0f));
        else {
            myHeight = sharedPref.getInt("pHeight", (int)(metrics.heightPixels * heightPercent / 100.0f));
        }
        setMeasuredDimension(myWidth, myHeight);
    }

    /**
     * Set current application service object
     *
     * @param service object
     */
    public void setService(MSKeyboardService service) {
        this.service = service;
        sharedPref =  PreferenceManager.getDefaultSharedPreferences(service);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (gestureDetector.onTouchEvent(event))
            return true;

        int action = event.getActionMasked();
        if (action == MotionEvent.ACTION_DOWN) {
            Log.v(TAG, "ACTION_DOWN");
            int index = event.getActionIndex();
            int j;
            for (j = 0; j < circles.length; j++) {
                if (circles[j].getBounds().contains((int)event.getX(index), (int)event.getY(index))) {
                    Log.d(TAG, "pressed " + j);
                    pressed[j] = true;
                    pointerOrig.put(event.getPointerId(index), j);
                    invalidate();
                    break;
                }
            }
            if (j >= circles.length) {
                pointerOrig.put(event.getPointerId(index), -1);
            }
            return true;
        } else if(action == MotionEvent.ACTION_MOVE) {
            Log.v(TAG, "ACTION MOVE");
            return true;
        } else if (action == MotionEvent.ACTION_UP) {
            Log.v(TAG, "ACTION_UP");
            int index = event.getActionIndex();
            Log.v(TAG, "orig: " + pointerOrig.get(event.getPointerId(index)));
            if (pointerOrig.get(event.getPointerId(index)) > -1) {
                Log.v(TAG, "orig unpressed: " + pointerOrig.get(event.getPointerId(index)));
                pressed[pointerOrig.get(event.getPointerId(index))] = false;
                pointerOrig.remove(event.getPointerId(index));
            }
            chordCoords[0] = new Point((int)event.getX(), (int)event.getY());
            if (System.currentTimeMillis() - lastPointerReleaseTime < TIMEOUT) {
                //Log.v(TAG, "Close together!");
                checkChord();
            } else {
                //Log.v(TAG, "Not close together!");
                checkSingle();
            }
            invalidate();
            return true;
        } else if (action == MotionEvent.ACTION_POINTER_DOWN){
            Log.v(TAG, "ACTION_POINTER_DOWN: " + event.getActionIndex());
            int index = event.getActionIndex();
            //mark button corresponding button pressed
            int j;
            for (j = 0; j < circles.length; j++) {
                if (circles[j].getBounds().contains((int)event.getX(index), (int)event.getY(index))) {
                    Log.d(TAG, "pressed " + j);
                    pressed[j] = true;
                    pointerOrig.put(event.getPointerId(index), j);
                    invalidate();
                    break;
                }
            }
            if (j >= circles.length) {
                pointerOrig.put(event.getPointerId(index), -1);
            }
            return true;
        } else if (action == MotionEvent.ACTION_POINTER_UP) {
            Log.v(TAG, "ACTION_POINTER_UP: " + event.getActionIndex());
            lastPointerReleaseTime = System.currentTimeMillis();
            int index = event.getActionIndex();
            Log.v(TAG, "orig: " + pointerOrig.get(event.getPointerId(index)));
            if (pointerOrig.get(event.getPointerId(index)) > -1) {
                Log.v(TAG, "orig unpressed: " + pointerOrig.get(event.getPointerId(index)));
                pressed[pointerOrig.get(event.getPointerId(index))] = false;
                pointerOrig.remove(event.getPointerId(index));
            }
            chordCoords[1] = new Point((int)event.getX(index), (int)event.getY(index));
            int j;
            for (j = 0; j < circles.length; j++) {
                if (circles[j].getBounds().contains((int) event.getX(index), (int) event.getY(index)) ) {
                    Log.d(TAG, "unpressed " + j);
                    pressed[j] = false;
                    invalidate();
                    break;
                } else if (event.getHistorySize() > 0 &&
                        circles[j].getBounds().contains((int) event.getHistoricalX(index, 0), (int) event.getHistoricalY(index, 0))) {
                    Log.d(TAG, "unpressed " + j);
                    pressed[j] = false;
                    invalidate();
                    break;
                }
            }
            return true;
        } else {
            return false;
        }
    }

    @Override
    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
        Log.d(TAG, "Some preference changed somewhere");
        if(key.equals("pHeight")) {
            Log.d(TAG, "Portrait Height value changed!");
            myHeight = sharedPreferences.getInt(key, pHeight);
        } else if(key.equals("lHeight")) {
            Log.d(TAG, "Landscape Height value changed!");
            myHeight = sharedPreferences.getInt(key, lHeight);
        }
    }

    /**
     * <h1>MyGestureDetector</h1>
     * Used to detect standard simple gestures.
     * <p>
     * Use default implementation
     */
    private class MyGestureDetector extends android.view.GestureDetector.SimpleOnGestureListener {
    }

    /**
     * Check if the chord is valid
     */
    private void checkChord() {
        int[] indeces = new int[2];
        indeces[0] = -1;
        indeces[1] = -1;
        //Process primary touch (needs to also be marked unpressed)
        for (int j = 0; j < circles.length; j++) {
            if (circles[j].getBounds().contains(chordCoords[0].x, chordCoords[0].y)) {
                indeces[0] = j;
                pressed[j] = false;
                break;
            }
        }
        //process secondary touch
        for (int j = 0; j < circles.length; j++) {
            if (circles[j].getBounds().contains(chordCoords[1].x, chordCoords[1].y)) {
                indeces[1] = j;
                break;
            }
        }
        if (indeces[0] >= 0 && indeces[1] >= 0) {
            if (indeces[1] > indeces[0])
                service.chordPressed(BUTTONS[indeces[0]], BUTTONS[indeces[1]]);
            else
                service.chordPressed(BUTTONS[indeces[1]], BUTTONS[indeces[0]]);
        } else {
            Log.e(TAG, "Chord missing one touch");
        }
    }

    /**
     * Check if single push is valid
     */
    private void checkSingle() {
        int index = -1;
        for (int i = 0; i < circles.length; i++) {
            if (circles[i].getBounds().contains(chordCoords[0].x, chordCoords[0].y)) {
                index = i;
                pressed[i] = false;
                break;
            }
        }
        if (index >= 0) {
            service.singlePressed(BUTTONS[index]);
        }
    }

    /**
     * Set button position on startup and resize
     * @param button to set position of
     */
    private void setButtonPosition(int button){
        if(button >=0 || button <= 9) {
            int widthForCircles = (int) (myWidth * 0.6f);
            int circleWidth = (int) (widthForCircles / 10.0f);
            int boxWidth = myWidth / 10;
            int heightDifference = 6;
            int heightModifier = 0;
            switch (button) {
                case 0: case 9:
                    hightModifier = 0;
                    break;
                case 1: case 8: case 3: case 6:
                    hightModifier = -1;
                    break;
                case 2: case 7:
                    hightModifier = -2;
                    break;
                case 4:case 5:
                    hightModifier = 1;
                    break;
            }


            int midPoint = (int) (boxWidth * button + boxWidth * 0.5f);
            int x = midPoint - (circleWidth / 2);
            int y = (myHeight / 2) - (circleWidth / 2) + hightModifier*myHeight / hightDifference;
            circles[button].setBounds(x, y, x + circleWidth, y + circleWidth);
        }
    }
}
